{"version":3,"file":"static/js/841.77c8f01b.chunk.js","mappings":"yOAuDA,EAlDoB,SAAHA,GAAkB,IAAZC,EAAID,EAAJC,KAQrBC,GAAwBC,EAAAA,EAAAA,UAAiB,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAqBC,EAAAA,EAAAA,MAAdC,GAAkCL,EAAAA,EAAAA,GAAAG,EAAA,GAAxB,GAUXG,EAAiC,CACrC,CACEC,MAAO,qBACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,6CACPC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACC,EAAGC,GAAI,OACdC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CACVC,IAAK,EACLC,IAAK,IACLC,aAAcP,EAAKQ,SAASnB,KAAKoB,OACjCC,SAAU,SAACC,GAAK,OAxBD,SAACA,EAAeX,GACvCV,EAAQqB,EACV,CAsB+BC,CAAiBD,EAAY,KAEnD,GAGP,CACIhB,MAAO,GACPE,IAAK,SACLC,OAAQ,SAACC,EAAGC,GAAI,OAAMC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CAACC,QAAS,kBA5BlB,SAACd,GAC1BP,EAAW,CAAEsB,OAAQf,EAAKgB,GAAIC,OAAQjC,EAAKgC,GAAI3B,KAAMA,GACvD,CA0BmD6B,CAAmBlB,EAAK,EAACG,SAAC,iHAA4B,IAIzG,OAAOF,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CAACC,WAAYpC,EAAKqC,MAAO3B,QAASA,GACjD,E,QC5BA,EAnBmB,WACjB,IAAQuB,GAAWK,EAAAA,EAAAA,MAAXL,OACRM,GAA6BC,EAAAA,EAAAA,IAAe,CAACP,OAAAA,IAArCjC,EAAIuC,EAAJvC,KAER,OAFwBuC,EAAVE,YAGLxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAI,KAIZC,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAKnB,EAAK4C,QACVD,EAAAA,EAAAA,MAAA,KAAAxB,SAAA,CAAG,4DAAanB,EAAK6C,QACxBF,EAAAA,EAAAA,MAAA,KAAAxB,SAAA,CAAG,yHAAwBnB,EAAK8C,SAChCH,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,CAAK,0FAAkBnB,EAAK+C,gBAC5B9B,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8LACAF,EAAAA,EAAAA,KAAC+B,EAAW,CAAChD,KAAMA,MAGzB,C","sources":["components/RatingTable/RatingTable.tsx","pages/Rating/RatingPage.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Table, InputNumber, Button } from \"antd\";\nimport { ColumnsType } from \"antd/es/table\";\nimport { useAddRateMutation } from \"../../redux/api/taskApi\";\n\nconst RatingTable = ({ data }) => {\n  interface DataType {\n    id: any;\n    name: string;\n    TaskUser: any;\n    rating: number;\n  }\n\n  const [rate, setRate] = useState<number>(0);\n  const [updateUser] = useAddRateMutation();\n\n  const handleRateChange = (value: number, user: DataType) => {\n    setRate(value);\n  };\n\n  const handleApplyChanges = (user: DataType) => {\n    updateUser({ userId: user.id, taskId: data.id, rate: rate });\n  };\n\n  const columns: ColumnsType<DataType> = [\n    {\n      title: \"ФИО\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Рейтинг\",\n      dataIndex: \"rating\",\n      key: \"rating\",\n      render: (_, user) => (\n        <>\n          <InputNumber\n            min={0}\n            max={100}\n            defaultValue={user.TaskUser.rate.rating}\n            onChange={(value) => handleRateChange(value, user)}\n          />\n        </>\n      ),\n    },\n    {\n        title: \"\",\n        key: \"action\",\n        render: (_, user) => (<Button onClick={() => handleApplyChanges(user)}>Применить изменения</Button>),\n      },\n  ];\n//\n  return <Table dataSource={data.users} columns={columns} />;\n};\n\nexport default RatingTable;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport RatingTable from '../../components/RatingTable/RatingTable';\nimport { Spin } from 'antd';\nimport { useGetOneQuery } from '../../redux/api/taskApi';\n\nconst RatingPage = () => {\n  const { taskId } = useParams();\n  const { data, isFetching } = useGetOneQuery({taskId});\n\n  if (isFetching) {\n    return <Spin />;\n  }\n\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <p>Тип задачи: {data.typ}</p>\n\t\t\t<p>Время закрытия задачи: {data.stop}</p>\n\t\t\t<pre>Описание задачи: {data.description }</pre>\n\t\t\t<p>Пользователи находящиеся в задаче:</p>\n      <RatingTable data={data} />\n    </div>\n  );\n};\nexport default RatingPage;"],"names":["_ref","data","_useState","useState","_useState2","_slicedToArray","rate","setRate","_useAddRateMutation","useAddRateMutation","updateUser","columns","title","dataIndex","key","render","_","user","_jsx","_Fragment","children","InputNumber","min","max","defaultValue","TaskUser","rating","onChange","value","handleRateChange","Button","onClick","userId","id","taskId","handleApplyChanges","Table","dataSource","users","useParams","_useGetOneQuery","useGetOneQuery","isFetching","Spin","_jsxs","name","typ","stop","description","RatingTable"],"sourceRoot":""}