{"version":3,"file":"static/js/53.2689c804.chunk.js","mappings":"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","sources":["components/TaskItem/taskItem.tsx","pages/Tasks/Tasks.tsx"],"sourcesContent":["import avatar from \"../../assets/Avatar.png\";\nimport { Avatar, Button, Card, Col, Divider, InputNumber, Modal, Popconfirm, Row } from 'antd';\nimport { ProjectTwoTone } from '@ant-design/icons';\nimport React, { useEffect, useState } from \"react\";\nimport varTaskLogo from '../../assets/Задачи вариативные.png';\nimport invarTaskLogo from '../../assets/Задачи инвариантные.png';\nimport { useAddUserMutation, useDeleteTaskMutation } from \"../../redux/api/taskApi\";\nimport Table, { ColumnsType } from \"antd/es/table\";\nimport { toast } from \"react-toastify\";\nimport { Link } from \"react-router-dom\";\nconst { Meta } = Card;\n\ninterface DataType {\n\tid: number;\n\tname: string;\n\tTaskUser: number;\n\trating: number;\n}\n\nconst columns: ColumnsType<DataType> = [\n\t{\n\t\ttitle: 'ФИО',\n\t\tdataIndex: 'name',\n\t\tkey: 'name',\n\t\trender: (text) => <p>{text}</p>,\n\t},\n\t{\n\t\ttitle: 'Прогноз',\n\t\tdataIndex: 'TaskUser',\n\t\tkey: 'predicted',\n\t\trender: (item) => Object.values(item)[0],\n\t},\n\t{\n\t\ttitle: 'Экспертная оценка',\n\t\tdataIndex: 'TaskUser',\n\t\tkey: 'rating',\n\t\trender: (item) => item.rate.rating === 0 ? <p>Нет</p> : item.rate.rating,\n\t},\n\n];\n\nexport const TaskItem = ({ item, refetch, user }) => {\n\tconst [addUser, { isError, error }] = useAddUserMutation();\n\tconst [delTask] = useDeleteTaskMutation();\n\tconst [modalOpen, setModalOpen] = useState(false);\n\tconst [predict, setPredict] = useState<string | number | null>(100);\n\tconst onClick = (contentId: string) => {\n\t\taddUser({ contentId, predict })\n\t\t\t.then(() => {\n\t\t\t\trefetch()\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ttoast.error(error.data.message);\n\t\t\t});\n\t};\n\tconst onDelete = (TasksId: string) => {\n\t\tdelTask({TasksId})\n\t\t\t.then(() => {\n\t\t\t\trefetch()\n\t\t\t})\n\t};\n\tconst Image = () => {\n\t\tif (item.typ === \"INVAR\") {\n\t\t\treturn <img src={invarTaskLogo} />\n\t\t} else if (item.typ === \"VAR\") {\n\t\t\treturn <img src={varTaskLogo} />\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\n\t}\n\n\tuseEffect(() => {\n\t\tif (isError) {\n\t\t\ttoast.error((error as any).data.message, {\n\t\t\t\tposition: 'top-right',\n\t\t\t  });\n\t\t}\n\t  }, [isError]);\n\n\tconst date = new Date(item.stop);\n\treturn <>\n\n\t\t<Card\n\t\t\tstyle={{ width: 240 }}\n\t\t\tcover={<Image />}\n\t\t>\n\t\t\t<Meta title={item.name} />\n\t\t\t<p>Тип задачи: {item.typ === \"INVAR\" ? \"Инвариантный\" : \"Вариативный\"}</p>\n\t\t\t<Button style={{ width: \"100%\" }} type=\"primary\" onClick={() => setModalOpen(true)}>\n\t\t\t\tОткрыть\n\t\t\t</Button>\n\n\t\t\t{user === \"ADMIN\" ? \n\t\t\t<>\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<Popconfirm\n\t\t\t\t\ttitle=\"Удаление\"\n\t\t\t\t\tplacement=\"bottom\"\n\t\t\t\t\tonConfirm={() => onDelete(item.id)}\n\t\t\t\t\tdescription={<>\n\t\t\t\t\t\t<p>Вы точно хотите удалить эту задачу?</p>\n\t\t\t\t\t</>\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<Button style={{ width: \"100%\", color: \"black\" }} type=\"dashed\">\n\t\t\t\t\t\tУдалить\n\t\t\t\t\t</Button>\n\t\t\t\t</Popconfirm> \n\t\t\t</> : null}\n\t\t</Card>\n\t\t<Modal\n\t\t\twidth={1024}\n\t\t\ttitle={item.name}\n\t\t\tcentered\n\t\t\topen={modalOpen}\n\t\t\tfooter={null}\n\t\t\tonCancel={() => setModalOpen(false)}\n\t\t>\n\t\t\t<Divider />\n\t\t\t<p>Тип задачи: {item.typ === \"INVAR\" ? \"Инвариантный\" : \"Вариативный\"}</p>\n\t\t\t<p>Время закрытия задачи: 31.05.{date.getFullYear()}</p>\n\t\t\t<p>Описание задачи: <pre>{item.description}</pre></p>\n\t\t\t<p>Пользователи находящиеся в задаче:</p>\n\t\t\t<Table size='small' columns={columns} dataSource={item.users} rowKey=\"id\" />\n\t\t\t<Row gutter={16} justify={\"space-between\"}>\n\t\t\t\t<Col flex=\"auto\">\n\t\t\t\t\t<Popconfirm\n\t\t\t\t\t\ttitle=\"Последний шаг\"\n\t\t\t\t\t\tplacement=\"bottom\"\n\t\t\t\t\t\tonConfirm={() => onClick(item.id)}\n\t\t\t\t\t\tdescription={<>\n\t\t\t\t\t\t\t<p>Пожалуйста введите кол-во процентов которое вы выполните от данной задачи!</p>\n\t\t\t\t\t\t\t<InputNumber\n\t\t\t\t\t\t\t\tvalue={predict}\n\t\t\t\t\t\t\t\tonChange={setPredict}\n\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\t\t\tformatter={(value) => `${value}%`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Button style={{ width: \"100%\" }} type=\"primary\" >\n\t\t\t\t\t\t\tПрисоединится\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Popconfirm>\n\t\t\t\t</Col>\n\t\t\t\t<Col flex=\"auto\"></Col>\n\t\t\t\t<Col flex=\"auto\" ><Link target=\"_blank\" to={`http://45.12.73.150:5000/${item.fileName}`}><Button style={{ width: \"100%\" }} type=\"default\" onClick={() => setModalOpen(true)}>\n\t\t\t\t\tОткрыть карточку задачи\n\t\t\t\t</Button></Link></Col>\n\t\t\t</Row>\n\t\t</Modal>\n\t</>;\n};\n","import { Button, Col, DatePicker, FloatButton, Form, Input, InputNumber, Modal, Pagination, PaginationProps, Row, Select, Upload, UploadProps, message, notification } from \"antd\";\nimport { TaskItem } from \"../../components/TaskItem\";\nimport { useCreateTaskMutation, useGetAllTasksQuery } from \"../../redux/api/taskApi\";\nimport { PlusOutlined, UploadOutlined } from '@ant-design/icons';\nimport React, { useEffect, useState } from \"react\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport { NotificationPlacement } from \"antd/es/notification/interface\";\nimport { toast } from \"react-toastify\";\nimport { useAppSelector } from \"../../redux/hooks\";\nimport { selectUser } from \"../../redux/features/userSlice\";\nimport { useParams } from \"react-router-dom\";\n\n\n\nconst Tasks = () => {\n\tconst { taskType } = useParams();\n\tconst { user } = useAppSelector(selectUser);\n\tconst [modalOpen, setModalOpen] = useState(false);\n\tconst [current, setCurrent] = useState(1);\n\tconst [form] = Form.useForm();\n\tconst [fileList, setFileList] = useState([]);\n\tconst [api, contextHolder] = notification.useNotification();\n\tconst { data, isSuccess, refetch } = useGetAllTasksQuery({ limit: '8', page: `${current}`, type: taskType })\n\tconst [createProject, { isSuccess: isCreateSuccess, isError, error }] = useCreateTaskMutation();\n\tconst onChange = (page) => {\n\t\tsetCurrent(page);\n\t\trefetch()\n\t};\n\tconst onFinishModal = (values: any) => {\n\n\t\tconst formData = new FormData();\n\t\tconst date = (new Date(values.stop, 4, 31)).toUTCString();\n\t\tformData.append(\"f\", fileList[0]?.originFileObj);\n\t\tformData.append(\"name\", values.name);\n\t\tformData.append(\"description\", values.description);\n\t\tformData.append(\"typ\", values.typ);\n\t\tformData.append(\"stop\", date);\n\n\t\tcreateProject(formData)\n\t\t\t.then(() => {\n\t\t\t\tsetModalOpen(false);\n\t\t\t\trefetch();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ttoast.error(error.data.message);\n\t\t\t});\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (isError) {\n\t\t\ttoast.error((error as any).data.message)\n\t\t}\n\t\tif (isCreateSuccess) {\n\t\t\trefetch()\n\t\t}\n\t}, [isError, isCreateSuccess])\n\n\tconst props: UploadProps = {\n\t\tbeforeUpload: (file) => {\n\t\t\tconst isAllowType = file.type === 'image/png' || file.type === 'image/jpeg' || file.type === 'application/msword' || file.type === 'text/plain' || file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || file.type === 'application/pdf';\n\t\t\tconst isLt200M = file.size / 1024 / 1024 < 1;\n\t\t\tif (!isAllowType) {\n\t\t\t\tmessage.error(`Этот загрузчик поддерживает только: .png, .jpeg, .doc, .docx, .pdf форматы! `);\n\t\t\t\treturn Upload.LIST_IGNORE;\n\t\t\t}\n\t\t\tif (!isLt200M) {\n\t\t\t\tmessage.error(`Размер файла не может превышать 200 мегабайт`);\n\t\t\t\treturn Upload.LIST_IGNORE;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t};\n\n\tconst normFile = (e) => {\n\t\tif (Array.isArray(e)) {\n\t\t\treturn e.slice(-1);\n\t\t}\n\t\treturn e && e.fileList.slice(-1);\n\t};\n\tif (!user) {\n\t\treturn null\n\t}\n\n\treturn <div style={{ maxWidth: 1024 }}>\n\t\t<Row justify=\"space-around\" style={{ width: \"100%\" }} gutter={[16, 16]}>\n\t\t\t{isSuccess ?\n\t\t\t\tdata.rows.map((item) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Col style={{ width: \"320px\" }} key={item.name} xs={{ span: 16 }} sm={{ span: 12 }} md={{ span: 8 }} lg={{ span: 6 }} xl={{ span: 6 }} >\n\t\t\t\t\t\t\t<TaskItem key={item.id} user={user.role} item={item} refetch={refetch} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t);\n\t\t\t\t}) :\n\t\t\t\tnull}\n\n\t\t\t{user.role === \"ADMIN\" ? <FloatButton\n\t\t\t\ticon={<PlusOutlined />}\n\t\t\t\tshape=\"circle\"\n\t\t\t\ttooltip={<div>Создать задачу</div>}\n\t\t\t\tonClick={() => setModalOpen(true)}\n\t\t\t/> : null}\n\t\t\t<Modal\n\t\t\t\twidth={1024}\n\t\t\t\ttitle=\"Создание задачи\"\n\t\t\t\tcentered\n\t\t\t\topen={modalOpen}\n\t\t\t\tfooter={null}\n\t\t\t\tonCancel={() => setModalOpen(false)}\n\t\t\t>\n\n\t\t\t\t<Form\n\t\t\t\t\tform={form}\n\t\t\t\t\tlayout=\"vertical\"\n\t\t\t\t\tonFinish={onFinishModal}\n\t\t\t\t>\n\t\t\t\t\t<Form.Item label=\"Название задачи:\" name=\"name\" rules={[{ required: true, message: 'Пожалуйста заполните поле!' }]} >\n\t\t\t\t\t\t<Input />\n\t\t\t\t\t</Form.Item>\n\n\t\t\t\t\t<Form.Item label=\"Год окончания задачи:\" name=\"stop\" rules={[{ required: true, message: 'Пожалуйста заполните поле!' }]} >\n\t\t\t\t\t\t<InputNumber\n\t\t\t\t\t\t\tdefaultValue={2024}\n\t\t\t\t\t\t\tmin={2024}\n\t\t\t\t\t\t\tmax={2099}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\n\t\t\t\t\t<Form.Item label=\"Тип задачи:\" name=\"typ\" rules={[{ required: true, message: 'Пожалуйста заполните поле!' }]} >\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tdefaultValue=\"VAR\"\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{ value: 'INVAR', label: 'Инвариантная задача' },\n\t\t\t\t\t\t\t\t{ value: 'VAR', label: 'Вариативная задача' },\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\n\t\t\t\t\t<Form.Item\n\t\t\t\t\t\tlabel=\"Описание задачи:\"\n\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\trules={[{ required: true, message: 'Пожалуйста заполните поле!' }]}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TextArea\n\t\t\t\t\t\t\tmaxLength={2000}\n\t\t\t\t\t\t\tshowCount\n\t\t\t\t\t\t\tautoSize={{ minRows: 4, maxRows: 8 }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item name=\"file\"\n\t\t\t\t\t\tvaluePropName=\"file\"\n\t\t\t\t\t\tgetValueFromEvent={normFile}\n\t\t\t\t\t\tlabel=\"Карточка задачи\" rules={[{ required: true, message: 'Пожалуйста заполните поле!' }]} >\n\t\t\t\t\t\t<Upload {...props} maxCount={1} fileList={fileList} onChange={({ fileList }) => setFileList(fileList)}>\n\t\t\t\t\t\t\t<Button icon={<UploadOutlined />}>Загрузить карточку задачи</Button>\n\t\t\t\t\t\t</Upload>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t\t<Form.Item>\n\t\t\t\t\t\t<Button htmlType=\"submit\" type=\"primary\">Создать</Button>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t</Form>\n\t\t\t</Modal>\n\t\t</Row>\n\t\t<Row justify=\"center\" style={{ marginTop: \"8px\" }}>\n\t\t\t<Pagination defaultPageSize={8} pageSize={8} showSizeChanger={false} current={current} onChange={onChange} total={isSuccess ? data.count : 0} />\n\t\t</Row>\n\n\t</div>;\n};\nexport default Tasks;"],"names":["Meta","Card","columns","title","dataIndex","key","render","text","_jsx","children","item","Object","values","rate","rating","TaskItem","_ref","refetch","user","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","_slicedToArray","addUser","_useAddUserMutation2$","isError","error","_useDeleteTaskMutatio","useDeleteTaskMutation","delTask","_useState","useState","_useState2","modalOpen","setModalOpen","_useState3","_useState4","predict","setPredict","Image","typ","src","invarTaskLogo","varTaskLogo","useEffect","toast","data","message","position","date","Date","stop","_jsxs","_Fragment","style","width","cover","name","Button","type","onClick","Popconfirm","placement","onConfirm","TasksId","id","then","description","color","Modal","centered","open","footer","onCancel","Divider","getFullYear","Table","size","dataSource","users","rowKey","Row","gutter","justify","Col","flex","contentId","catch","InputNumber","value","onChange","min","max","formatter","concat","Link","target","to","fileName","taskType","useParams","useAppSelector","selectUser","current","setCurrent","_Form$useForm","Form","form","_useState5","_useState6","fileList","setFileList","_notification$useNoti","notification","_notification$useNoti2","_useGetAllTasksQuery","useGetAllTasksQuery","limit","page","isSuccess","_useCreateTaskMutatio","useCreateTaskMutation","_useCreateTaskMutatio2","createProject","_useCreateTaskMutatio3","isCreateSuccess","React","props","beforeUpload","file","isAllowType","isLt200M","Upload","maxWidth","rows","map","xs","span","sm","md","lg","xl","role","FloatButton","icon","PlusOutlined","shape","tooltip","layout","onFinish","_fileList$","formData","FormData","toUTCString","append","originFileObj","label","rules","required","Input","defaultValue","Select","options","TextArea","maxLength","showCount","autoSize","minRows","maxRows","valuePropName","getValueFromEvent","e","Array","isArray","slice","_objectSpread","maxCount","UploadOutlined","htmlType","marginTop","Pagination","defaultPageSize","pageSize","showSizeChanger","total","count"],"sourceRoot":""}